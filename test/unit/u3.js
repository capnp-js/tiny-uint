/* @flow */

import * as assert from "assert";
import { describe, it } from "mocha";

import { u3_mask } from "../../src/u3";

describe("u3_mask", function () {
  it("masks 0 to 0", function () {
    assert.equal(u3_mask(0x00, 0x00), 0x00);
    assert.equal(u3_mask(0x00, 0x01), 0x00);
    assert.equal(u3_mask(0x00, 0x02), 0x00);
    assert.equal(u3_mask(0x00, 0x03), 0x00);
    assert.equal(u3_mask(0x00, 0x04), 0x00);
    assert.equal(u3_mask(0x00, 0x05), 0x00);
    assert.equal(u3_mask(0x00, 0x06), 0x00);
    assert.equal(u3_mask(0x00, 0x07), 0x00);
  });

  it("masks 1 correctly", function () {
    assert.equal(u3_mask(0x01, 0x00), 0x00);
    assert.equal(u3_mask(0x01, 0x01), 0x01);
    assert.equal(u3_mask(0x01, 0x02), 0x00);
    assert.equal(u3_mask(0x01, 0x03), 0x01);
    assert.equal(u3_mask(0x01, 0x04), 0x00);
    assert.equal(u3_mask(0x01, 0x05), 0x01);
    assert.equal(u3_mask(0x01, 0x06), 0x00);
    assert.equal(u3_mask(0x01, 0x07), 0x01);
  });

  it("masks 2 correctly", function () {
    assert.equal(u3_mask(0x02, 0x00), 0x00);
    assert.equal(u3_mask(0x02, 0x01), 0x00);
    assert.equal(u3_mask(0x02, 0x02), 0x02);
    assert.equal(u3_mask(0x02, 0x03), 0x02);
    assert.equal(u3_mask(0x02, 0x04), 0x00);
    assert.equal(u3_mask(0x02, 0x05), 0x00);
    assert.equal(u3_mask(0x02, 0x06), 0x02);
    assert.equal(u3_mask(0x02, 0x07), 0x02);
  });

  it("masks 3 correctly", function () {
    assert.equal(u3_mask(0x03, 0x00), 0x00);
    assert.equal(u3_mask(0x03, 0x01), 0x01);
    assert.equal(u3_mask(0x03, 0x02), 0x02);
    assert.equal(u3_mask(0x03, 0x03), 0x03);
    assert.equal(u3_mask(0x03, 0x04), 0x00);
    assert.equal(u3_mask(0x03, 0x05), 0x01);
    assert.equal(u3_mask(0x03, 0x06), 0x02);
    assert.equal(u3_mask(0x03, 0x07), 0x03);
  });

  it("masks 4 correctly", function () {
    assert.equal(u3_mask(0x04, 0x00), 0x00);
    assert.equal(u3_mask(0x04, 0x01), 0x00);
    assert.equal(u3_mask(0x04, 0x02), 0x00);
    assert.equal(u3_mask(0x04, 0x03), 0x00);
    assert.equal(u3_mask(0x04, 0x04), 0x04);
    assert.equal(u3_mask(0x04, 0x05), 0x04);
    assert.equal(u3_mask(0x04, 0x06), 0x04);
    assert.equal(u3_mask(0x04, 0x07), 0x04);
  });

  it("masks 5 correctly", function () {
    assert.equal(u3_mask(0x05, 0x00), 0x00);
    assert.equal(u3_mask(0x05, 0x01), 0x01);
    assert.equal(u3_mask(0x05, 0x02), 0x00);
    assert.equal(u3_mask(0x05, 0x03), 0x01);
    assert.equal(u3_mask(0x05, 0x04), 0x04);
    assert.equal(u3_mask(0x05, 0x05), 0x05);
    assert.equal(u3_mask(0x05, 0x06), 0x04);
    assert.equal(u3_mask(0x05, 0x07), 0x05);
  });

  it("masks 6 correctly", function () {
    assert.equal(u3_mask(0x06, 0x00), 0x00);
    assert.equal(u3_mask(0x06, 0x01), 0x00);
    assert.equal(u3_mask(0x06, 0x02), 0x02);
    assert.equal(u3_mask(0x06, 0x03), 0x02);
    assert.equal(u3_mask(0x06, 0x04), 0x04);
    assert.equal(u3_mask(0x06, 0x05), 0x04);
    assert.equal(u3_mask(0x06, 0x06), 0x06);
    assert.equal(u3_mask(0x06, 0x07), 0x06);
  });

  it("masks 7 correctly", function () {
    assert.equal(u3_mask(0x07, 0x00), 0x00);
    assert.equal(u3_mask(0x07, 0x01), 0x01);
    assert.equal(u3_mask(0x07, 0x02), 0x02);
    assert.equal(u3_mask(0x07, 0x03), 0x03);
    assert.equal(u3_mask(0x07, 0x04), 0x04);
    assert.equal(u3_mask(0x07, 0x05), 0x05);
    assert.equal(u3_mask(0x07, 0x06), 0x06);
    assert.equal(u3_mask(0x07, 0x07), 0x07);
  });
});
